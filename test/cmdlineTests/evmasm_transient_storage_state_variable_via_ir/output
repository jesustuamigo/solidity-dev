Optimized IR:
/// @use-src 0:"evmasm_transient_storage_state_variable_via_ir/input.sol"
object "C_14" {
    code {
        {
            mstore(64, memoryguard(0x80))
            if callvalue()
            {
                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            }
            let _1 := allocate_unbounded()
            codecopy(_1, dataoffset("C_14_deployed"), datasize("C_14_deployed"))
            return(_1, datasize("C_14_deployed"))
        }
        function allocate_unbounded() -> memPtr
        { memPtr := mload(64) }
        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
        { revert(0, 0) }
    }
    /// @use-src 0:"evmasm_transient_storage_state_variable_via_ir/input.sol"
    object "C_14_deployed" {
        code {
            {
                mstore(64, memoryguard(0x80))
                if iszero(lt(calldatasize(), 4))
                {
                    let selector := shift_right_unsigned(calldataload(0))
                    switch selector
                    case 0x26121ff0 { external_fun_f() }
                    default { }
                }
                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            }
            function shift_right_unsigned(value) -> newValue
            { newValue := shr(224, value) }
            function allocate_unbounded() -> memPtr
            { memPtr := mload(64) }
            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
            { revert(0, 0) }
            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
            { revert(0, 0) }
            function abi_decode(headStart, dataEnd)
            {
                if slt(sub(dataEnd, headStart), 0)
                {
                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()
                }
            }
            function abi_encode_tuple(headStart) -> tail
            { tail := add(headStart, 0) }
            function external_fun_f()
            {
                if callvalue()
                {
                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()
                }
                abi_decode(4, calldatasize())
                fun_f()
                let memPos := allocate_unbounded()
                let memEnd := abi_encode_tuple(memPos)
                return(memPos, sub(memEnd, memPos))
            }
            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()
            { revert(0, 0) }
            function shift_right_0_unsigned(value) -> newValue
            { newValue := shr(0, value) }
            function cleanup_from_storage_uint256(value) -> cleaned
            { cleaned := value }
            function extract_from_storage_value_offsett_uint256(slot_value) -> value
            {
                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))
            }
            function read_from_transient_storage_split_offset_uint256(slot) -> value
            {
                value := extract_from_storage_value_offsett_uint256(tload(slot))
            }
            function cleanup_rational_by(value) -> cleaned
            { cleaned := value }
            function cleanup_uint256(value) -> cleaned
            { cleaned := value }
            function identity(value) -> ret
            { ret := value }
            function convert_rational_by_to_uint256(value) -> converted
            {
                converted := cleanup_uint256(identity(cleanup_rational_by(value)))
            }
            function panic_error_0x11()
            {
                mstore(0, shl(224, 0x4e487b71))
                mstore(4, 0x11)
                revert(0, 0x24)
            }
            function checked_add_uint256(x, y) -> sum
            {
                x := cleanup_uint256(x)
                y := cleanup_uint256(y)
                sum := add(x, y)
                if gt(x, sum) { panic_error_0x11() }
            }
            function shift_left(value) -> newValue
            { newValue := shl(0, value) }
            function update_byte_slice_shift(value, toInsert) -> result
            {
                let mask := not(0)
                toInsert := shift_left(toInsert)
                value := and(value, not(mask))
                result := or(value, and(toInsert, mask))
            }
            function convert_uint256_to_uint256(value) -> converted
            {
                converted := cleanup_uint256(identity(cleanup_uint256(value)))
            }
            function prepare_store_uint256(value) -> ret
            { ret := value }
            function update_transient_storage_value_offsett_uint256_to_uint256(slot, value)
            {
                let convertedValue := convert_uint256_to_uint256(value)
                tstore(slot, update_byte_slice_shift(tload(slot), prepare_store_uint256(convertedValue)))
            }
            function fun_f()
            {
                let _1 := read_from_transient_storage_split_offset_uint256(0x00)
                let expr := _1
                let expr_1 := 0x01
                let expr_2 := checked_add_uint256(expr, convert_rational_by_to_uint256(expr_1))
                update_transient_storage_value_offsett_uint256_to_uint256(0x00, expr_2)
            }
        }
        data ".metadata" hex""
    }
}
